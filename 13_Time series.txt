import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split


# Load your dataset
data = pd.read_csv("Stock_Prices.csv")

# Check for missing values
data.isna().sum()


# Remove rows with missing values
data = data.dropna()


# Filter data for a specific stock (e.g., 'AAL')
data = data[data['Name'] == 'AAL']


# Convert the 'Date' column to datetime
data['Date'] = pd.to_datetime(data['Date'], dayfirst=True)


# Sort the data by 'Date'
data = data.sort_values('Date', ascending=True)


# Plot the stock prices
plt.figure(figsize=(16, 6), dpi=100)
plt.plot(data['Date'], data['Close'])
plt.show()

# Calculate the rolling 12-month mean
window12mean = data['Close'].rolling(window=12).mean()
plt.figure(figsize=(16, 6), dpi=100)
plt.plot(data['Date'], window12mean)
plt.show()


# Remove non-numeric 'Name' column
data = data.drop(columns=['Name'])


# Calculate and display the correlation matrix
sns.heatmap(data.corr(), annot=True)
plt.show()


# Time series analysis with Exponential Smoothing
train_data, test_data = train_test_split(data, test_size=0.2, shuffle=False)


model_es = ExponentialSmoothing(train_data['Close'], seasonal='add', seasonal_periods=12)
results_es = model_es.fit()
forecast_es = results_es.forecast(steps=len(test_data))


# Calculate RMSE for the Exponential Smoothing model
rmse_es = np.sqrt(mean_squared_error(test_data['Close'], forecast_es))
print("RMSE for Exponential Smoothing Model:", rmse_es)


# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(train_data['Date'], train_data['Close'], label="Training Data")
plt.plot(test_data['Date'], test_data['Close'], label="Test Data")
plt.plot(test_data['Date'], forecast_es, label="Exponential Smoothing Forecast")
plt.title("Stock Price Forecasting")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.show()


